---
title: "Dplyr 101"
author: "Fabrice Rossi"
format: 
  html:
    code-fold: true
---

```{r}
#| message: false
here::i_am("git-101-2024.Rproj")
library(here)
library(vroom)
library(ggplot2)
theme_set(theme_bw())
```

## Data import

```{r}
#| message: false
white_wine <- vroom(here("data", "winequality-white.csv")) #here in order not to writ \ or / to simplify
```

|                        |                      |
|------------------------|----------------------|
| Number of observations | `r NROW(white_wine)` |
| Number of variables    | `r NCOL(white_wine)` |

```{r}
ggplot(white_wine, aes(x = quality)) +
  geom_bar()
```

## Data transformation
```{r}
#| message: false
library(dplyr)
```

### Column extraction 
```{r}
class(white_wine)
## class + column extraction
class(white_wine$quality)
## column extraction and then class
white_wine$quality |> class()
white_wine[["quality"]] |> class()
white_wine$`fixed acidity` |> class()
white_wine[["fixed acidity"]] |> class()
## dplyr style
white_wine |>
  pull(quality) |>
  class()
class(pull(white_wine, quality))
```

With `dplyr`, `pull()` is the column extraction function, somewhat similar to the
dollar `$` operator and to the double bracket `[[]]`. 


### Column recoding
This ggplot call gives a warning because `quality` is numeric which is not
supported for bar filling in `geom_bar()`.

```{r}
#| eval: false
#| code-fold: false
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```


```{r}
#| eval: false
white_wine$quality <- factor(white_wine$quality,
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
white_wine$quality <- white_wine$quality |> factor(
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
```

```{r}
white_wine <- white_wine |>
  mutate(quality = factor(quality, ordered = TRUE, levels = 3:9))
```

```{r}
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```

### Computing new columns
This is again a task for `mutate()`.

```{r}
white_wine <- white_wine |>
  mutate(`captured sulfur dioxide` = `total sulfur dioxide` - `free sulfur dioxide`,
         `free sd %` = round(`free sulfur dioxide` / `total sulfur dioxide` * 100, 2))
```

## Sub-setting
### Selecting columns
Column sub-setting is done with the `select()` function.

```{r}
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH)
```

Side note: we can display nicely data frames with the `knitr::kable()` function
but the original data frame is too big, so we select the first 10 rows with
`slice()`. 

```{r}
#| message: false
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH) |>
  slice(1:10) |>
  knitr::kable()
```
Positional selection based on the indices of the columns.

```{r}
#| eval: false
white_wine |> 
  select(1:3)
```

Columns can also be selected based on conditions on their names or on their
nature. 

```{r}
#| eval: false
white_wine |> 
  select(contains("acid") | pH)
```

Selection based on the content.

```{r}
#| eval: false
white_wine |> 
  select(where(is.factor))
```

```{r}
#| eval: false
white_wine |> 
  select(where(\(x) is.numeric(x) & (max(x) < 5))) #ano function, corresponding to a "lapply" to each column of the dtf which is a list
```

### Selecting rows

Simple selection is based on indices with `slice()`. 

```{r}
white_wine |> 
  slice(1:5, 150:155) |>
  select(alcohol, quality) |>
  knitr::kable()
```

Condition based selection uses `filter()`.

```{r}
white_wine |> 
  filter(alcohol > 14) |>
  select(alcohol, quality, `citric acid`, `residual sugar`) |>
  knitr::kable()
```
### Simple application
```{r}
ggplot(white_wine, aes(x=alcohol)) +
  geom_density(bw="sj") +
  geom_rug(alpha = 0.1)
```
```{r}
white_wine |> 
  filter(alcohol >= 13, `citric acid` < 1) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```

```{r}
white_wine |> 
  filter(alcohol <= 9) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```
```{r}
white_wine |>
  mutate(`alcohol category` = case_when(alcohol <= 9 ~ "low",
                                        alcohol >= 13 ~ "high",
                                        .default = "medium")) |>
  filter(`alcohol category` != "medium") |>
  filter(`citric acid` <= 1) |> 
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c() +
  facet_wrap(vars(`alcohol category`))
```


## Agregation fct

aka summary fct that turns vector into value


```{r}
#logical ope : any(), all()


```

### simple summary use 

```{r}
white_wine |> summarise(median(alcohol),
                        sd(alcohol))
                  
```

```{r}
white_wine |> select(alcohol) |> mutate(a_m_median = alcohol - median (alcohol), .keep = "none") # .smth modify the default parameter; here we say that we dont keep the columns that we haven't called

white_wine |> select(alcohol) |> mutate((na = alcohol - mean(alcohol))/IQR(alcohol), .keep = "none")


```


```{r}
quantile(white_wine$`residual sugar`, probs = seq(0,1,0.1))


```



### group by

#### continous var
```{r}
white_wine |> 
  summarise(median(`residual sugar`),
            .by = quality )#compute the summary on subgroups of the dtf, subgroups identifiy by value of a var

```

```{r}
white_wine |> mutate(ac = cut(alcohol, breaks = c(7,9,12,15,18))) |> summarize(median(`residual sugar`),
                                                                               n(), 
                                                                               .by=ac ) #bug here : solve : issue with .by commmand
#breaks are the interval so it should contains smth smaller than min value and marger than max values
```


```{r}
white_wine |> mutate(ac=cut(alcohol, breaks = c(9,10,11,12,15), ordered_results = TRUE)) |>
  summarise(median(`residual sugar`), n(), .by = ac)
```

```{r}
white_wine |> mutate(ac=cut(alcohol, breaks = c(7,10,11,12,15), ordered_results = TRUE)) |> 
  ggplot(aes(x=ac)) + 
  geom_bar()
```

```{r}
aq <- white_wine |> pull(alcohol) |> quantile(probs = seq(0, 1, by=0.2)) #remember the way by is written
aq
white_wine |> mutate(ac=cut(alcohol, breaks = aq, ordered_results = TRUE)) |> 
  ggplot(aes(x=ac, fill = quality)) + 
  geom_bar(position ="fill")
```

####Functions with a .by parameter

some dplyr verbs supports the .by parameter : 
-summarise, mutate, slice, filter, reframe
```{r}
white_wine |>
  select(1:2) |> #for the column
  slice(1:5)  #for the rows


```

```{r}
white_wine |>
 slice(1:5, .by = quality) |> #5 different quality used
  select(1:2|quality) #two columns selected and quality
```

```{r}
white_wine |> 
  slice_sample(n=1, by = quality) |> #careful of the by notation, slice one line per quality bc n=1 and we order by qualityk
  select(1:2|quality)

white_wine |> 
  slice_max(alcohol, by = quality) |> #careful of the by notation 
  select(alcohol|quality)
```


#### 'group_by()'

```{r}
white_wine |>
  group_by(quality) |>#if i first do that and then use a fct (ex: summarize) i am going to get as if i put a ".by=group" command on each function
  summarise(mean(`citric acid`))

```
possible to group ex: 

```{r}
diamonds |> group_by(cut, clarity) |> #layer grouping strat, first group by cut then sub-group by clarity
  summarise(mean(price))
```


```{r}
diamonds |> summarise(median(price), .by = c(cut,clarity)) |>
  arrange(cut,clarity)
```

```{r}
diamonds |>
  group_by(cut,color) |>
  summarise(N=n(), .groups = "drop_last") |>
  summarise(sum(N)) #summarise will delete everything except the group it works on, here cut, and the summary itself
 
```

```{r}
diamonds |>
  group_by(cut,color) |>
  summarise(N=n(), .groups = "drop_last") |>
  mutate(prob=N/sum(N)) |> #mutate is group aware, agregation at the level of the group
  ungroup()
```

## Tidying data

```{r}
install.packages("tidyr")
library(tidyr)

```

### long to wide table
```{r}
color_given_cut <- diamonds |>
  group_by(cut,color) |>
  summarise(N=n(), .groups = "drop_last") |>
  mutate(prob=N/sum(N)) |> #mutate is group aware, agregation at the level of the group
  ungroup()

```

```{r}
#lets reshape to have a better view on the condi proba
#when we pivot ? : ideally when there are 3 columns :  2id var and one var that gives the value
color_given_cut |> select(!N) |> #!N select all except N
  pivot_wider(id_cols= cut, names_from = color, values_from = prob)
```

### wide to long table

```{r}
data("world_bank_pop")
```

```{r}
world_bank_pop |> filter(indicator == "SP.POP.TOTL")|>
  select(!indicator) |>
  pivot_longer(!country, names_to = "year", names_transform = as.integer, values_to = "total pop") |>
  #changed the name of the new variables we kept
  filter(country =="ESP") |>
  ggplot(aes(x=year, y = `total pop`, color= country)) + geom_line() + theme(legend.position = "none")
```

```{r}
#multiple id kept(we kept every indicator)
world_bank_pop |> 
  filter(country %in% c("ESP","FRA")) |>
  select(!indicator) |>
  pivot_longer(!country & !indicator)
```

```{r}
world_bank_pop |> filter(indicator == "SP.POP.TOTL")|>
  select(!indicator) |>
  pivot_longer(!country, names_to = "year", names_transform = as.integer, values_to = "total pop") |>
  ggplot(aes(x=year, y = `total pop`, color= country)) + geom_line() + theme(legend.position = "none")
```

```{r}
#to see better
world_bank_pop |> filter(indicator == "SP.POP.TOTL")|>
  select(!indicator) |>
  filter(!is.na(`2000`)) |>
  slice_sample(n= 10, weight_by =`2000`)|>
  pivot_longer(!country, names_to = "year", names_transform = as.integer, values_to = "total pop") |>
  ggplot(aes(x=year, y = `total pop`, color= country)) + geom_line() + theme(legend.position = "right") +
  scale_y_continuous(transform = "log10")
```

## Nesting
```{r}
library(dplyr)
```


```{r}
df_list <- tibble(x= 1:3,
                y = letters[1:3],
                z= list(c(1,2),c("Alice","Bob", "Charlie"),3))
#if we want a df instead of a tible we put the I operator in front of complex columns (ie here in   z= I(..))
df_list
```

###Linear models

```{r}
diamonds_price_lm <- lm(price ~ . , data = diamonds) #dependant on all var including an intercept
```

```{r}
diamonds_price_lm
summary(diamonds_price_lm)
plot(diamonds_price_lm)
```


```{r}
library(tidyr)
#create a lm of the subset of the dataset id by the cut
#possible to filter and then lm but we can do it with nesting
diamonds_price_cut_lm <- diamonds |> nest(.by = cut) |> mutate(sub_lm =lapply(data, \(x) lm(price ~., data = x)) )
#we are applying an ano fct to each nest that do a linear regression
```
```{r}
install.packages("broom")
library(broom)
```


```{r}

#need the package "broom"
diamonds_price_cut_lm <- diamonds |> nest(.by = cut) |> mutate(sub_lm =lapply(data, \(x) lm(price ~., data = x)) )

diamonds_price_cut_sub_lm <- diamonds |> nest(.by = cut) |> mutate(tlm = lapply(sub_lm, tidy))
#version to have cleaner data

```

```{r}
#we unnest the coefficients chose in 'select'
diamonds_price_cut_lm |> select(cut, tlm) |> unnest(tlm) |>
  select(cut, term, estimate) |>
  pivot_wider(names_from = term, values_from = estimate)
#pivot to have a row per cut

```

```{r}
diamonds_price_cut_lm |> select(cut, tlm) |> unnest(tlm) |>
  select(cut, tlm) |>
  unnest(tlm) |>
  filter(p.value < 0.01) |>
  select(cut,term, estimate) |>
  pivot_wider(names_from = term, values_from = estimate)
#pivot to have a row per cut
```

## Multiple dtb

### Primary key
```{r}
products <- vroom(here("data", "northwind", "Products.csv"))

```
The product id column is the **primary key** of the **products** table
meaning that the values are unique (same nb of values than rows)
```{r}
#we can delete na and nan value in the table and check if the values are all distinct (primary key)
pid_nb <- products |> 
  select(ProductID) |>
  filter(!is.na(ProductID) & !is.nan(ProductID)) |> 
  distinct(ProductID) |>
  nrow()
```

Product is a valid **primary key** if `r pid_nb` == nrow(products)
### Foreign keys

```{r}
library(readr)
categories <- read_csv(here("data", "northwind", "Categories.csv"), col_types = "icc-")
```
The **categoryID** column is the **primary key** of the **categories** table
The products table has a **categoryID** column which is likely to be a foreign key referencing the **primary key** of **categories**
### Join 
way to combine 2 tables into a single one by selecting a subset of the cartesian product btw the 2 tables
Cartesian product of 2 sets : collection of pairs

The natural join selects only pairs of tupples (row of a column) that have the same value of columns that have the same names

```{r}
p_c <- products |> 
  inner_join(categories) #will detect automatically the joining by the thing in common (natural join)
```
 the two are separated bc we want to avoid redundances in the same table but we keep smth to associate them (ie an ID)

Lets break categoryID column in products and try to join nevertheless
```{r}
broken_p_c <- products |> 
  mutate(CategoryID = CategoryID - 1) |>
  inner_join(categories)
```

in this case tupples with no match are removed


we can verify that categoryID is a **Foreign key** by counting the nb of couples in the results 
-> `r nrow(p_c) == nrow(products)`

### Application ex 

we want a single table with all the categories (given by their name) and for each category the nb of products
Broken solution
```{r}
products |> summarise("Number of prod" = n(), .by = CategoryID)
```

First sol 
```{r}
products |> summarise("Number of prod" = n(), .by = CategoryID) |>
  inner_join(categories) |> select(!Description) |>
  select(!CategoryID) |> 
  arrange(CategoryName) |>
  rename(Category = CategoryName) |> 
  relocate(Category) |> #to change the order of column, put categoryname in front
  knitr::kable()

```
Second sol : join then summarize
```{r}
products |>
  select(CategoryID) |>
  inner_join(categories |> select(Category = CategoryName, CategoryID),
         by =  join_by(CategoryID))|>
  summarise("Nb of products" = n(), .by = Category) |>
  arrange(Category)
```


```{r}
suppliers <- vroom(here("data","northwind", "Suppliers.csv"))
```

we want a table of countries that associates a country to the nb of products that are supplied by suppliers of this country
```{r}
products |> 
  select(SupplierID) |>
  inner_join(suppliers |> select(SupplierID, Country), by = join_by(SupplierID)) |> #we use select to optimise the computation
  summarize("Nb of products"= n(), .by = Country)
  
  
```



