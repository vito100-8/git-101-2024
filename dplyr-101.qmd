---
title: "Dplyr 101"
author: "Fabrice Rossi"
format: 
  html:
    code-fold: true
---

```{r}
#| message: false
here::i_am("git-101-2024.Rproj")
library(here)
library(vroom)
library(ggplot2)
theme_set(theme_bw())
```

## Data import

```{r}
#| message: false
white_wine <- vroom(here("data", "winequality-white.csv")) #here in order not to writ \ or / to simplify
```

|                        |                      |
|------------------------|----------------------|
| Number of observations | `r NROW(white_wine)` |
| Number of variables    | `r NCOL(white_wine)` |

```{r}
ggplot(white_wine, aes(x = quality)) +
  geom_bar()
```

## Data transformation
```{r}
#| message: false
library(dplyr)
```

### Column extraction 
```{r}
class(white_wine)
## class + column extraction
class(white_wine$quality)
## column extraction and then class
white_wine$quality |> class()
white_wine[["quality"]] |> class()
white_wine$`fixed acidity` |> class()
white_wine[["fixed acidity"]] |> class()
## dplyr style
white_wine |>
  pull(quality) |>
  class()
class(pull(white_wine, quality))
```

With `dplyr`, `pull()` is the column extraction function, somewhat similar to the
dollar `$` operator and to the double bracket `[[]]`. 


### Column recoding
This ggplot call gives a warning because `quality` is numeric which is not
supported for bar filling in `geom_bar()`.

```{r}
#| eval: false
#| code-fold: false
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```


```{r}
#| eval: false
white_wine$quality <- factor(white_wine$quality,
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
white_wine$quality <- white_wine$quality |> factor(
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
```

```{r}
white_wine <- white_wine |>
  mutate(quality = factor(quality, ordered = TRUE, levels = 3:9))
```

```{r}
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```

### Computing new columns
This is again a task for `mutate()`.

```{r}
white_wine <- white_wine |>
  mutate(`captured sulfur dioxide` = `total sulfur dioxide` - `free sulfur dioxide`,
         `free sd %` = round(`free sulfur dioxide` / `total sulfur dioxide` * 100, 2))
```

## Sub-setting
### Selecting columns
Column sub-setting is done with the `select()` function.

```{r}
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH)
```

Side note: we can display nicely data frames with the `knitr::kable()` function
but the original data frame is too big, so we select the first 10 rows with
`slice()`. 

```{r}
#| message: false
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH) |>
  slice(1:10) |>
  knitr::kable()
```
Positional selection based on the indices of the columns.

```{r}
#| eval: false
white_wine |> 
  select(1:3)
```

Columns can also be selected based on conditions on their names or on their
nature. 

```{r}
#| eval: false
white_wine |> 
  select(contains("acid") | pH)
```

Selection based on the content.

```{r}
#| eval: false
white_wine |> 
  select(where(is.factor))
```

```{r}
#| eval: false
white_wine |> 
  select(where(\(x) is.numeric(x) & (max(x) < 5))) #ano function, corresponding to a "lapply" to each column of the dtf which is a list
```

### Selecting rows

Simple selection is based on indices with `slice()`. 

```{r}
white_wine |> 
  slice(1:5, 150:155) |>
  select(alcohol, quality) |>
  knitr::kable()
```

Condition based selection uses `filter()`.

```{r}
white_wine |> 
  filter(alcohol > 14) |>
  select(alcohol, quality, `citric acid`, `residual sugar`) |>
  knitr::kable()
```
### Simple application
```{r}
ggplot(white_wine, aes(x=alcohol)) +
  geom_density(bw="sj") +
  geom_rug(alpha = 0.1)
```
```{r}
white_wine |> 
  filter(alcohol >= 13, `citric acid` < 1) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```

```{r}
white_wine |> 
  filter(alcohol <= 9) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```
```{r}
white_wine |>
  mutate(`alcohol category` = case_when(alcohol <= 9 ~ "low",
                                        alcohol >= 13 ~ "high",
                                        .default = "medium")) |>
  filter(`alcohol category` != "medium") |>
  filter(`citric acid` <= 1) |> 
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c() +
  facet_wrap(vars(`alcohol category`))
```


## Agregation fct

aka summary fct that turns vector into value


```{r}
#logical ope : any(), all()


```

### simple summary use 

```{r}
white_wine |> summarise(median(alcohol),
                        sd(alcohol))
                  
```

```{r}
white_wine |> select(alcohol) |> mutate(a_m_median = alcohol - median (alcohol), .keep = "none") # .smth modify the default parameter; here we say that we dont keep the previous columns of the dataset

white_wine |> select(alcohol) |> mutate((na = alcohol - mean(alcohol))/IQR(alcohol), .keep = "none")


```


```{r}
quantile(white_wine$`residual sugar`, probs = seq(0,1,0.1))


```



### group by

#### continous var
```{r}
white_wine |> 
  summarise(median(`residual sugar`),
            .by = quality )#compute the summary on subgroups of the dtf, subgroups identifiy by value of a var

```

```{r}
white_wine |> mutate(ac = cut(alcohol, breaks = c(7,9,12,15,18))) |> summarize(median(`residual sugar`),
                                                                               n(), 
                                                                               .by=ac ) #bug here : solve : issue with .by commmand
#breaks are the interval so it should contains smth smaller than min value and marger than max values
```


```{r}
white_wine |> mutate(ac=cut(alcohol, breaks = c(9,10,11,12,15), ordered_results = TRUE)) |>
  summarise(median(`residual sugar`), n(), .by = ac)
```

```{r}
white_wine |> mutate(ac=cut(alcohol, breaks = c(7,10,11,12,15), ordered_results = TRUE)) |> 
  ggplot(aes(x=ac)) + 
  geom_bar()
```

```{r}
aq <- white_wine |> pull(alcohol) |> quantile(probs = seq(0, 1, by=0.2)) #remember the way by is written
aq
white_wine |> mutate(ac=cut(alcohol, breaks = aq, ordered_results = TRUE)) |> 
  ggplot(aes(x=ac, fill = quality)) + 
  geom_bar(position ="fill")
```

####Functions with a .by parameter

some dplyr verbs supports the .by parameter : 
-summarise, mutate, slice, filter, reframe
```{r}
white_wine |>
  select(1:2) |> #for the column
  slice(1:5)  #for the rows


```

```{r}
white_wine |>
 slice(1:5, .by = quality) |> #5 different quality used
  select(1:2|quality) #two columns selected and quality
```

```{r}
white_wine |> 
  slice_sample(n=1, by = quality) |> #careful of the by notation 
  select(1:2|quality)

white_wine |> 
  slice_max(alcohol, by = quality) |> #careful of the by notation 
  select(alcohol|quality)
```

